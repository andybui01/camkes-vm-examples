/*
 * Copyright 2017, Data61, CSIRO (ABN 41 687 119 230)
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

#include <configurations/vm.h>

import <std_connector.camkes>;
import <global-connectors.camkes>;
import <seL4VMDTBPassthrough.idl4>;
import <FileServerInterface.camkes>;
import <FileServer/FileServer.camkes>;
import <SerialServer/SerialServer.camkes>;
import <TimeServer/TimeServer.camkes>;
import <vm-connectors.camkes>;
import <devices.camkes>;

struct vswitch_mapping {
       string mac_addr;
       int send_id;
       int recv_id;
};

component VM {
    VM_INIT_DEF()
    maybe uses VirtQueueDev recv1;
    maybe uses VirtQueueDrv send1;
    maybe uses VirtQueueDev recv2;
    maybe uses VirtQueueDrv send2;

    maybe uses VirtQueueDev read;
    maybe uses VirtQueueDrv write;
    maybe uses VirtQueueDev read1;
    maybe uses VirtQueueDrv write1;
}

assembly {
    composition {
        /* Boilerplate composition settings */
        VM_GENERAL_COMPOSITION_DEF()

        /* Other standard VM defintions (vm0, vm1, vm1) */
        VM_COMPOSITION_DEF(0)
        VM_COMPOSITION_DEF(1)

        /* Connect all the components to use the serial server */
        component SerialServer serial;
        component TimeServer time_server;
        connection seL4TimeServer serialserver_timer(from serial.timeout, to time_server.the_timer);

        component VirtQueueInit vm0_con;
        connection seL4VirtQueues vm0_con_conn(to vm0_con.init, from vm0.read, from vm0.write, from serial.recv1, from serial.send1);

        component VirtQueueInit vm1_con;
        connection seL4VirtQueues vm1_con_conn(to vm1_con.init, from vm1.read, from vm1.write, from serial.recv2, from serial.send2);

        component VirtQueueInit vm0_vm1;
        connection seL4VirtQueues vm0_vm1_conn(to vm0_vm1.init, from vm0.read1, from vm0.write1, from vm1.read1, from vm1.write1);

        connection seL4GlobalAsynchCallback serial_global_callback(from serial.self, to serial.serial_wait);

        /* vm0-[vm1,vm2] connection */
        // component VirtQueueInit vm1_vm0;
        // connection seL4VirtQueues vm1_vm0_conn(to vm1_vm0.init, from vm0.send1, from vm0.recv1, from vm1.send1, from vm1.recv1);

        /* DTB Passthrough */
        connection seL4VMDTBPassthrough vm0_dtb(from vm0.dtb_self, to vm0.dtb);
        connection seL4VMDTBPassthrough vm1_dtb(from vm1.dtb_self, to vm1.dtb);
    }
    configuration {
        VM_GENERAL_CONFIGURATION_DEF()
        VM_CONFIGURATION_DEF(0)
        VM_CONFIGURATION_DEF(1)
        VM_VIRTUAL_SERIAL_GENERAL_CONFIGURATION_DEF()

        vm0.num_extra_frame_caps = 0;
        vm0.extra_frame_map_address = 0;
        vm0.cnode_size_bits = 18;
        vm0.simple_untyped23_pool = 12;

        vm1.num_extra_frame_caps = 0;
        vm1.extra_frame_map_address = 0;
        vm1.cnode_size_bits = 18;
        vm1.simple_untyped23_pool = 12;

        // /* VM0-VM1 virtqueue configurations */
        // vm0.recv1_id = 0;
        // vm0.recv1_shmem_size = 8192;
        // vm0.send1_id = 1;
        // vm0.send1_shmem_size = 8192;

        // /* VM1 virtqueue configurations */
        // vm1.recv1_id = 0;
        // vm1.recv1_shmem_size = 8192;
        // vm1.send1_id = 1;
        // vm1.send1_shmem_size = 8192;

        /* Indexes correspond to port numbers in the VM layout arrays */
        vm0.serial_layout = [
            {"recv_id": 4, "send_id": 5},
            {"recv_id": 6, "send_id": 7}
        ];

        vm1.serial_layout = [
            {"recv_id": 2, "send_id": 3},
            {"recv_id": 4, "send_id": 5}
        ];

        // /* Indexes correspond to client ids in the serial layout array */
        serial.serial_layout = [
            {"recv_id": 0, "send_id": 1},
            {"recv_id": 2, "send_id": 3}
        ];

        /* VM0 virtqueue config */
        vm0.read_id = 4;
        vm0.read_shmem_size = 0x2000;
        vm0.write_id = 5;
        vm0.write_shmem_size = 0x2000;
        vm0.read1_id = 6;
        vm0.read1_shmem_size = 0x2000;
        vm0.write1_id = 7;
        vm0.write1_shmem_size = 0x2000;

        /* VM1 virtqueue config */
        vm1.read_id = 2;
        vm1.read_shmem_size = 0x2000;
        vm1.write_id = 3;
        vm1.write_shmem_size = 0x2000;
        vm1.read1_id = 4;
        vm1.read1_shmem_size = 0x2000;
        vm1.write1_id = 5;
        vm1.write1_shmem_size = 0x2000;

        /* SerialServer virtqueue config */
        serial.recv1_id = 0;
        serial.recv1_shmem_size = 0x2000;
        serial.send1_id = 1;
        serial.send1_shmem_size = 0x2000;

        serial.recv2_id = 2;
        serial.recv2_shmem_size = 0x2000;
        serial.send2_id = 3;
        serial.send2_shmem_size = 0x2000;

        /* Virtqueue Topology */
        // vm1_vm0.init_topology = [{ "drv" : "vm0.send1", "dev" : "vm1.recv1"},
        //                          { "drv" : "vm1.send1", "dev" : "vm0.recv1"}];

        vm0_con.init_topology = [{ "drv" : "vm0.write", "dev" : "serial.recv1"},
                                 { "drv" : "serial.send1", "dev" : "vm0.read"}];
                                 
        vm1_con.init_topology = [{ "drv" : "vm1.write", "dev" : "serial.recv2"},
                                 { "drv" : "serial.send2", "dev" : "vm1.read"}];

        vm0_vm1.init_topology = [{ "drv" : "vm1.write1", "dev" : "vm0.read1"},
                                 { "drv" : "vm0.write1", "dev" : "vm1.read1"}];

    }
}
